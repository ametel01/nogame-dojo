/* Autogenerated file. Do not edit manually. */

import { defineComponent, Type as RecsType, World } from '@dojoengine/recs';

export type ComponentDefinitions = {
  // Define the structure of your components here
  ColonyCompound: ReturnType<typeof defineComponent>;
  ColonyCount: ReturnType<typeof defineComponent>;
  ColonyDefence: ReturnType<typeof defineComponent>;
  ColonyOwner: ReturnType<typeof defineComponent>;
  ColonyPosition: ReturnType<typeof defineComponent>;
  ColonyResource: ReturnType<typeof defineComponent>;
  ColonyResourceTimer: ReturnType<typeof defineComponent>;
  ColonyShip: ReturnType<typeof defineComponent>;
  PlanetColoniesCount: ReturnType<typeof defineComponent>;
  PlanetCompound: ReturnType<typeof defineComponent>;
  PlanetDefence: ReturnType<typeof defineComponent>;
  PlanetShip: ReturnType<typeof defineComponent>;
  ActiveMission: ReturnType<typeof defineComponent>;
  ActiveMissionLen: ReturnType<typeof defineComponent>;
  IncomingMissionLen: ReturnType<typeof defineComponent>;
  IncomingMissions: ReturnType<typeof defineComponent>;
  GamePlanet: ReturnType<typeof defineComponent>;
  GamePlanetCount: ReturnType<typeof defineComponent>;
  GamePlanetOwner: ReturnType<typeof defineComponent>;
  GameOwnerPlanet: ReturnType<typeof defineComponent>;
  GameSetup: ReturnType<typeof defineComponent>;
  LastActive: ReturnType<typeof defineComponent>;
  PlanetDebrisField: ReturnType<typeof defineComponent>;
  PlanetPosition: ReturnType<typeof defineComponent>;
  PlanetResource: ReturnType<typeof defineComponent>;
  PlanetResourceTimer: ReturnType<typeof defineComponent>;
  PlanetResourcesSpent: ReturnType<typeof defineComponent>;
  PositionToPlanet: ReturnType<typeof defineComponent>;
  PlanetTech: ReturnType<typeof defineComponent>;
};

export function defineContractComponents(world: World): ComponentDefinitions {
  return {
    ColonyCompound: defineComponent(
      world,
      {
        planet_id: RecsType.Number,
        colony_id: RecsType.Number,
        name: RecsType.BigInt,
        level: RecsType.Number,
      },
      {
        metadata: {
          name: 'ColonyCompounds',
          types: ['u32', 'u8', 'felt252', 'u8'],
          customTypes: [],
        },
      }
    ),
    ColonyCount: defineComponent(
      world,
      { game_id: RecsType.Number, count: RecsType.Number },
      {
        metadata: {
          name: 'ColonyCount',
          types: ['u8', 'u8'],
          customTypes: [],
        },
      }
    ),
    ColonyDefence: defineComponent(
      world,
      {
        planet_id: RecsType.Number,
        colony_id: RecsType.Number,
        name: RecsType.BigInt,
        count: RecsType.Number,
      },
      {
        metadata: {
          name: 'ColonyDefences',
          types: ['u32', 'u8', 'felt252', 'u32'],
          customTypes: [],
        },
      }
    ),
    ColonyOwner: defineComponent(
      world,
      { colony_planet_id: RecsType.Number, planet_id: RecsType.Number },
      {
        metadata: {
          name: 'ColonyOwner',
          types: ['u32', 'u32'],
          customTypes: [],
        },
      }
    ),
    ColonyPosition: defineComponent(
      world,
      {
        planet_id: RecsType.Number,
        colony_id: RecsType.Number,
        position: { system: RecsType.Number, orbit: RecsType.Number },
      },
      {
        metadata: {
          name: 'ColonyPosition',
          types: ['u32', 'u8', 'u16', 'u8'],
          customTypes: ['Position'],
        },
      }
    ),
    ColonyResource: defineComponent(
      world,
      {
        planet_id: RecsType.Number,
        colony_id: RecsType.Number,
        name: RecsType.BigInt,
        amount: RecsType.BigInt,
      },
      {
        metadata: {
          name: 'ColonyResource',
          types: ['u32', 'u8', 'felt252', 'u128'],
          customTypes: [],
        },
      }
    ),
    ColonyResourceTimer: defineComponent(
      world,
      {
        planet_id: RecsType.Number,
        colony_id: RecsType.Number,
        last_collection: RecsType.Number,
      },
      {
        metadata: {
          name: 'ColonyResourceTimer',
          types: ['u32', 'u8', 'u64'],
          customTypes: [],
        },
      }
    ),
    ColonyShip: defineComponent(
      world,
      {
        planet_id: RecsType.Number,
        colony_id: RecsType.Number,
        name: RecsType.BigInt,
        count: RecsType.Number,
      },
      {
        metadata: {
          name: 'ColonyShips',
          types: ['u32', 'u8', 'felt252', 'u32'],
          customTypes: [],
        },
      }
    ),
    PlanetColoniesCount: defineComponent(
      world,
      { planet_id: RecsType.Number, count: RecsType.Number },
      {
        metadata: {
          name: 'PlanetColoniesCount',
          types: ['u32', 'u8'],
          customTypes: [],
        },
      }
    ),
    PlanetCompound: defineComponent(
      world,
      {
        planet_id: RecsType.Number,
        name: RecsType.BigInt,
        level: RecsType.Number,
      },
      {
        metadata: {
          name: 'PlanetCompounds',
          types: ['u32', 'felt252', 'u8'],
          customTypes: [],
        },
      }
    ),
    PlanetDefence: defineComponent(
      world,
      {
        planet_id: RecsType.Number,
        name: RecsType.BigInt,
        count: RecsType.Number,
      },
      {
        metadata: {
          name: 'PlanetDefences',
          types: ['u32', 'felt252', 'u32'],
          customTypes: [],
        },
      }
    ),
    PlanetShip: defineComponent(
      world,
      {
        planet_id: RecsType.Number,
        name: RecsType.BigInt,
        count: RecsType.Number,
      },
      {
        metadata: {
          name: 'PlanetShips',
          types: ['u32', 'felt252', 'u32'],
          customTypes: [],
        },
      }
    ),
    ActiveMission: defineComponent(
      world,
      {
        planet_id: RecsType.Number,
        mission_id: RecsType.Number,
        mission: {
          id: RecsType.Number,
          time_start: RecsType.Number,
          origin: RecsType.Number,
          destination: RecsType.Number,
          time_arrival: RecsType.Number,
          fleet: {
            carrier: RecsType.Number,
            scraper: RecsType.Number,
            sparrow: RecsType.Number,
            frigate: RecsType.Number,
            armade: RecsType.Number,
          },
          category: RecsType.Number,
        },
      },
      {
        metadata: {
          name: 'ActiveMission',
          types: [
            'u32',
            'usize',
            'u32',
            'u64',
            'u32',
            'u32',
            'u64',
            'u32',
            'u32',
            'u32',
            'u32',
            'u32',
            'u8',
          ],
          customTypes: ['Mission', 'Fleet'],
        },
      }
    ),
    ActiveMissionLen: defineComponent(
      world,
      { planet_id: RecsType.Number, lenght: RecsType.Number },
      {
        metadata: {
          name: 'ActiveMissionLen',
          types: ['u32', 'usize'],
          customTypes: [],
        },
      }
    ),
    IncomingMissionLen: defineComponent(
      world,
      { planet_id: RecsType.Number, lenght: RecsType.Number },
      {
        metadata: {
          name: 'IncomingMissionLen',
          types: ['u32', 'usize'],
          customTypes: [],
        },
      }
    ),
    IncomingMissions: defineComponent(
      world,
      {
        planet_id: RecsType.Number,
        mission_id: RecsType.Number,
        mission: {
          origin: RecsType.Number,
          id_at_origin: RecsType.Number,
          time_arrival: RecsType.Number,
          number_of_ships: RecsType.Number,
          destination: RecsType.Number,
        },
      },
      {
        metadata: {
          name: 'IncomingMissions',
          types: ['u32', 'usize', 'u32', 'usize', 'u64', 'u32', 'u32'],
          customTypes: ['IncomingMission'],
        },
      }
    ),
    GamePlanet: defineComponent(
      world,
      { owner: RecsType.BigInt, planet_id: RecsType.Number },
      {
        metadata: {
          name: 'GamePlanet',
          types: ['contractaddress', 'u32'],
          customTypes: [],
        },
      }
    ),
    GamePlanetCount: defineComponent(
      world,
      { game_id: RecsType.Number, count: RecsType.Number },
      {
        metadata: {
          name: 'GamePlanetCount',
          types: ['u8', 'u32'],
          customTypes: [],
        },
      }
    ),
    GamePlanetOwner: defineComponent(
      world,
      { planet_id: RecsType.Number, owner: RecsType.BigInt },
      {
        metadata: {
          name: 'GamePlanetOwner',
          types: ['u32', 'contractaddress'],
          customTypes: [],
        },
      }
    ),
    GameOwnerPlanet: defineComponent(
      world,
      { owner: RecsType.BigInt, planet_id: RecsType.Number },
      {
        metadata: {
          name: 'GameOwnerPlanet',
          types: ['contractaddress', 'u32'],
          customTypes: [],
        },
      }
    ),
    GameSetup: defineComponent(
      world,
      {
        game_id: RecsType.Number,
        owner: RecsType.BigInt,
        nft_address: RecsType.BigInt,
        eth_address: RecsType.BigInt,
        price: RecsType.BigInt,
        speed: RecsType.Number,
        start_time: RecsType.Number,
      },
      {
        metadata: {
          name: 'GameSetup',
          types: [
            'u8',
            'contractaddress',
            'contractaddress',
            'contractaddress',
            'u128',
            'usize',
            'u64',
          ],
          customTypes: [],
        },
      }
    ),
    LastActive: defineComponent(
      world,
      { planet_id: RecsType.Number, time: RecsType.Number },
      {
        metadata: {
          name: 'LastActive',
          types: ['u32', 'u64'],
          customTypes: [],
        },
      }
    ),
    PlanetDebrisField: defineComponent(
      world,
      {
        planet_id: RecsType.Number,
        debris: { steel: RecsType.BigInt, quartz: RecsType.BigInt },
      },
      {
        metadata: {
          name: 'PlanetDebrisField',
          types: ['u32', 'u128', 'u128'],
          customTypes: ['Debris'],
        },
      }
    ),
    PlanetPosition: defineComponent(
      world,
      {
        planet_id: RecsType.Number,
        position: { system: RecsType.Number, orbit: RecsType.Number },
      },
      {
        metadata: {
          name: 'PlanetPosition',
          types: ['u32', 'u16', 'u8'],
          customTypes: ['Position'],
        },
      }
    ),
    PlanetResource: defineComponent(
      world,
      {
        planet_id: RecsType.Number,
        name: RecsType.BigInt,
        amount: RecsType.BigInt,
      },
      {
        metadata: {
          name: 'PlanetResource',
          types: ['u32', 'felt252', 'u128'],
          customTypes: [],
        },
      }
    ),
    PlanetResourceTimer: defineComponent(
      world,
      { planet_id: RecsType.Number, last_collection: RecsType.Number },
      {
        metadata: {
          name: 'PlanetResourceTimer',
          types: ['u32', 'u64'],
          customTypes: [],
        },
      }
    ),
    PlanetResourcesSpent: defineComponent(
      world,
      { planet_id: RecsType.Number, spent: RecsType.BigInt },
      {
        metadata: {
          name: 'PlanetResourcesSpent',
          types: ['u32', 'u128'],
          customTypes: [],
        },
      }
    ),
    PositionToPlanet: defineComponent(
      world,
      {
        position: { system: RecsType.Number, orbit: RecsType.Number },
        planet_id: RecsType.Number,
      },
      {
        metadata: {
          name: 'PositionToPlanet',
          types: ['u16', 'u8', 'u32'],
          customTypes: ['Position'],
        },
      }
    ),
    PlanetTech: defineComponent(
      world,
      {
        planet_id: RecsType.Number,
        name: RecsType.BigInt,
        level: RecsType.Number,
      },
      {
        metadata: {
          name: 'PlanetTechs',
          types: ['u32', 'felt252', 'u8'],
          customTypes: [],
        },
      }
    ),
  };
}
