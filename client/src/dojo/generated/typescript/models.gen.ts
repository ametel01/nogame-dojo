// Generated by dojo-bindgen on Sat, 6 Apr 2024 04:41:16 +0000. Do not modify this file manually.

import { defineComponent, Type as RecsType, World } from '@dojoengine/recs';

export type ContractComponents = Awaited<
  ReturnType<typeof defineContractComponents>
>;

// Type definition for `nogame::models::colony::ColonyDockyardTimer` struct
export interface ColonyDockyardTimer {
  planet_id: number;
  colony_id: number;
  name: ShipBuildType;
  quantity: number;
  time_end: number;
}

export const ColonyDockyardTimerDefinition = {
  planet_id: RecsType.Number,
  colony_id: RecsType.Number,
  name: RecsType.Number,
  quantity: RecsType.Number,
  time_end: RecsType.Number,
};

// Type definition for `nogame::data::types::ShipBuildType` enum
export enum ShipBuildType {
  Carrier,
  Scraper,
  Sparrow,
  Frigate,
  Armade,
}

// Type definition for `nogame::models::colony::ColonyDefenceTimer` struct
export interface ColonyDefenceTimer {
  planet_id: number;
  colony_id: number;
  name: DefenceBuildType;
  quantity: number;
  time_end: number;
}

export const ColonyDefenceTimerDefinition = {
  planet_id: RecsType.Number,
  colony_id: RecsType.Number,
  name: RecsType.Number,
  quantity: RecsType.Number,
  time_end: RecsType.Number,
};

// Type definition for `nogame::data::types::DefenceBuildType` enum
export enum DefenceBuildType {
  Celestia,
  Blaster,
  Beam,
  Astral,
  Plasma,
}

// Type definition for `nogame::models::compound::PlanetCompounds` struct
export interface PlanetCompounds {
  planet_id: number;
  name: number;
  level: number;
}

export const PlanetCompoundsDefinition = {
  planet_id: RecsType.Number,
  name: RecsType.Number,
  level: RecsType.Number,
};

// Type definition for `nogame::data::types::Position` struct
export interface Position {
  system: number;
  orbit: number;
}

export const PositionDefinition = {
  system: RecsType.Number,
  orbit: RecsType.Number,
};

// Type definition for `nogame::models::colony::ColonyPosition` struct
export interface ColonyPosition {
  planet_id: number;
  colony_id: number;
  position: Position;
}

export const ColonyPositionDefinition = {
  planet_id: RecsType.Number,
  colony_id: RecsType.Number,
  position: PositionDefinition,
};

// Type definition for `nogame::data::types::Resources` struct
export interface Resources {
  steel: bigint;
  quartz: bigint;
  tritium: bigint;
}

export const ResourcesDefinition = {
  steel: RecsType.BigInt,
  quartz: RecsType.BigInt,
  tritium: RecsType.BigInt,
};

// Type definition for `nogame::data::types::Fleet` struct
export interface Fleet {
  carrier: number;
  scraper: number;
  sparrow: number;
  frigate: number;
  armade: number;
}

export const FleetDefinition = {
  carrier: RecsType.Number,
  scraper: RecsType.Number,
  sparrow: RecsType.Number,
  frigate: RecsType.Number,
  armade: RecsType.Number,
};

// Type definition for `nogame::data::types::Mission` struct
export interface Mission {
  id: number;
  time_start: number;
  origin: number;
  destination: number;
  cargo: Resources;
  time_arrival: number;
  fleet: Fleet;
  category: number;
  is_return: boolean;
}

export const MissionDefinition = {
  id: RecsType.Number,
  time_start: RecsType.Number,
  origin: RecsType.Number,
  destination: RecsType.Number,
  cargo: ResourcesDefinition,
  time_arrival: RecsType.Number,
  fleet: FleetDefinition,
  category: RecsType.Number,
  is_return: RecsType.Boolean,
};

// Type definition for `nogame::models::fleet::ActiveMission` struct
export interface ActiveMission {
  planet_id: number;
  mission_id: number;
  mission: Mission;
}

export const ActiveMissionDefinition = {
  planet_id: RecsType.Number,
  mission_id: RecsType.Number,
  mission: MissionDefinition,
};

// Type definition for `nogame::models::tech::PlanetTechTimer` struct
export interface PlanetTechTimer {
  planet_id: number;
  name: TechUpgradeType;
  levels: number;
  time_end: number;
}

export const PlanetTechTimerDefinition = {
  planet_id: RecsType.Number,
  name: RecsType.Number,
  levels: RecsType.Number,
  time_end: RecsType.Number,
};

// Type definition for `nogame::data::types::TechUpgradeType` enum
export enum TechUpgradeType {
  Energy,
  Digital,
  Beam,
  Armour,
  Ion,
  Plasma,
  Weapons,
  Shield,
  Spacetime,
  Combustion,
  Thrust,
  Warp,
  Exocraft,
}

// Type definition for `nogame::models::colony::ColonyResource` struct
export interface ColonyResource {
  planet_id: number;
  colony_id: number;
  name: number;
  amount: bigint;
}

export const ColonyResourceDefinition = {
  planet_id: RecsType.Number,
  colony_id: RecsType.Number,
  name: RecsType.Number,
  amount: RecsType.BigInt,
};

// Type definition for `nogame::models::colony::ColonyDefences` struct
export interface ColonyDefences {
  planet_id: number;
  colony_id: number;
  name: number;
  count: number;
}

export const ColonyDefencesDefinition = {
  planet_id: RecsType.Number,
  colony_id: RecsType.Number,
  name: RecsType.Number,
  count: RecsType.Number,
};

// Type definition for `nogame::data::types::Position` struct
export interface Position {
  system: number;
  orbit: number;
}

// Type definition for `nogame::models::planet::PlanetPosition` struct
export interface PlanetPosition {
  planet_id: number;
  position: Position;
}

export const PlanetPositionDefinition = {
  planet_id: RecsType.Number,
  position: PositionDefinition,
};

// Type definition for `nogame::models::game::GameOwnerPlanet` struct
export interface GameOwnerPlanet {
  owner: bigint;
  planet_id: number;
}

export const GameOwnerPlanetDefinition = {
  owner: RecsType.BigInt,
  planet_id: RecsType.Number,
};

// Type definition for `nogame::models::colony::PlanetColoniesCount` struct
export interface PlanetColoniesCount {
  planet_id: number;
  count: number;
}

export const PlanetColoniesCountDefinition = {
  planet_id: RecsType.Number,
  count: RecsType.Number,
};

// Type definition for `nogame::models::game::GamePlanetOwner` struct
export interface GamePlanetOwner {
  planet_id: number;
  owner: bigint;
}

export const GamePlanetOwnerDefinition = {
  planet_id: RecsType.Number,
  owner: RecsType.BigInt,
};

// Type definition for `nogame::models::game::GamePlanet` struct
export interface GamePlanet {
  owner: bigint;
  planet_id: number;
}

export const GamePlanetDefinition = {
  owner: RecsType.BigInt,
  planet_id: RecsType.Number,
};

// Type definition for `nogame::models::colony::ColonyCompounds` struct
export interface ColonyCompounds {
  planet_id: number;
  colony_id: number;
  name: number;
  level: number;
}

export const ColonyCompoundsDefinition = {
  planet_id: RecsType.Number,
  colony_id: RecsType.Number,
  name: RecsType.Number,
  level: RecsType.Number,
};

// Type definition for `nogame::models::colony::ColonyCount` struct
export interface ColonyCount {
  game_id: number;
  count: number;
}

export const ColonyCountDefinition = {
  game_id: RecsType.Number,
  count: RecsType.Number,
};

// Type definition for `nogame::models::colony::ColonyCompoundTimer` struct
export interface ColonyCompoundTimer {
  planet_id: number;
  colony_id: number;
  name: CompoundUpgradeType;
  levels: number;
  time_end: number;
}

export const ColonyCompoundTimerDefinition = {
  planet_id: RecsType.Number,
  colony_id: RecsType.Number,
  name: RecsType.Number,
  levels: RecsType.Number,
  time_end: RecsType.Number,
};

// Type definition for `nogame::data::types::CompoundUpgradeType` enum
export enum CompoundUpgradeType {
  SteelMine,
  QuartzMine,
  TritiumMine,
  EnergyPlant,
  Lab,
  Dockyard,
  Cybernetics,
}

// Type definition for `nogame::models::dockyard::PlanetDockyardTimer` struct
export interface PlanetDockyardTimer {
  planet_id: number;
  name: ShipBuildType;
  quantity: number;
  time_end: number;
}

export const PlanetDockyardTimerDefinition = {
  planet_id: RecsType.Number,
  name: RecsType.Number,
  quantity: RecsType.Number,
  time_end: RecsType.Number,
};

// Type definition for `nogame::models::colony::ColonyResourceTimer` struct
export interface ColonyResourceTimer {
  planet_id: number;
  colony_id: number;
  last_collection: number;
}

export const ColonyResourceTimerDefinition = {
  planet_id: RecsType.Number,
  colony_id: RecsType.Number,
  last_collection: RecsType.Number,
};

// Type definition for `nogame::models::fleet::IncomingMissionLen` struct
export interface IncomingMissionLen {
  planet_id: number;
  lenght: number;
}

export const IncomingMissionLenDefinition = {
  planet_id: RecsType.Number,
  lenght: RecsType.Number,
};

// Type definition for `nogame::data::types::Debris` struct
export interface Debris {
  steel: bigint;
  quartz: bigint;
}

export const DebrisDefinition = {
  steel: RecsType.BigInt,
  quartz: RecsType.BigInt,
};

// Type definition for `nogame::models::planet::PlanetDebrisField` struct
export interface PlanetDebrisField {
  planet_id: number;
  debris: Debris;
}

export const PlanetDebrisFieldDefinition = {
  planet_id: RecsType.Number,
  debris: DebrisDefinition,
};

// Type definition for `nogame::models::game::GameSetup` struct
export interface GameSetup {
  game_id: number;
  speed: number;
  start_time: number;
}

export const GameSetupDefinition = {
  game_id: RecsType.Number,
  speed: RecsType.Number,
  start_time: RecsType.Number,
};

// Type definition for `nogame::models::compound::PlanetCompoundTimer` struct
export interface PlanetCompoundTimer {
  planet_id: number;
  name: CompoundUpgradeType;
  levels: number;
  time_end: number;
}

export const PlanetCompoundTimerDefinition = {
  planet_id: RecsType.Number,
  name: RecsType.Number,
  levels: RecsType.Number,
  time_end: RecsType.Number,
};

// Type definition for `nogame::models::fleet::ActiveMissionLen` struct
export interface ActiveMissionLen {
  planet_id: number;
  lenght: number;
}

export const ActiveMissionLenDefinition = {
  planet_id: RecsType.Number,
  lenght: RecsType.Number,
};

// Type definition for `nogame::data::types::IncomingMission` struct
export interface IncomingMission {
  origin: number;
  id_at_origin: number;
  time_arrival: number;
  number_of_ships: number;
  destination: number;
}

export const IncomingMissionDefinition = {
  origin: RecsType.Number,
  id_at_origin: RecsType.Number,
  time_arrival: RecsType.Number,
  number_of_ships: RecsType.Number,
  destination: RecsType.Number,
};

// Type definition for `nogame::models::fleet::IncomingMissions` struct
export interface IncomingMissions {
  planet_id: number;
  mission_id: number;
  mission: IncomingMission;
}

export const IncomingMissionsDefinition = {
  planet_id: RecsType.Number,
  mission_id: RecsType.Number,
  mission: IncomingMissionDefinition,
};

// Type definition for `nogame::models::planet::PlanetResourcesSpent` struct
export interface PlanetResourcesSpent {
  planet_id: number;
  spent: bigint;
}

export const PlanetResourcesSpentDefinition = {
  planet_id: RecsType.Number,
  spent: RecsType.BigInt,
};

// Type definition for `nogame::models::defence::PlanetDefences` struct
export interface PlanetDefences {
  planet_id: number;
  name: number;
  count: number;
}

export const PlanetDefencesDefinition = {
  planet_id: RecsType.Number,
  name: RecsType.Number,
  count: RecsType.Number,
};

// Type definition for `nogame::models::planet::PlanetResourceTimer` struct
export interface PlanetResourceTimer {
  planet_id: number;
  last_collection: number;
}

export const PlanetResourceTimerDefinition = {
  planet_id: RecsType.Number,
  last_collection: RecsType.Number,
};

// Type definition for `nogame::data::types::Position` struct
export interface Position {
  system: number;
  orbit: number;
}

// Type definition for `nogame::models::planet::PositionToPlanet` struct
export interface PositionToPlanet {
  position: Position;
  planet_id: number;
}

export const PositionToPlanetDefinition = {
  position: PositionDefinition,
  planet_id: RecsType.Number,
};

// Type definition for `nogame::models::planet::PlanetResource` struct
export interface PlanetResource {
  planet_id: number;
  name: number;
  amount: bigint;
}

export const PlanetResourceDefinition = {
  planet_id: RecsType.Number,
  name: RecsType.Number,
  amount: RecsType.BigInt,
};

// Type definition for `nogame::models::planet::LastActive` struct
export interface LastActive {
  planet_id: number;
  time: number;
}

export const LastActiveDefinition = {
  planet_id: RecsType.Number,
  time: RecsType.Number,
};

// Type definition for `nogame::models::colony::ColonyShips` struct
export interface ColonyShips {
  planet_id: number;
  colony_id: number;
  name: number;
  count: number;
}

export const ColonyShipsDefinition = {
  planet_id: RecsType.Number,
  colony_id: RecsType.Number,
  name: RecsType.Number,
  count: RecsType.Number,
};

// Type definition for `nogame::models::tech::PlanetTechs` struct
export interface PlanetTechs {
  planet_id: number;
  name: number;
  level: number;
}

export const PlanetTechsDefinition = {
  planet_id: RecsType.Number,
  name: RecsType.Number,
  level: RecsType.Number,
};

// Type definition for `nogame::models::colony::ColonyOwner` struct
export interface ColonyOwner {
  colony_planet_id: number;
  planet_id: number;
}

export const ColonyOwnerDefinition = {
  colony_planet_id: RecsType.Number,
  planet_id: RecsType.Number,
};

// Type definition for `nogame::models::defence::PlanetDefenceTimer` struct
export interface PlanetDefenceTimer {
  planet_id: number;
  name: DefenceBuildType;
  quantity: number;
  time_end: number;
}

export const PlanetDefenceTimerDefinition = {
  planet_id: RecsType.Number,
  name: RecsType.Number,
  quantity: RecsType.Number,
  time_end: RecsType.Number,
};
// Type definition for `nogame::models::dockyard::PlanetShips` struct
export interface PlanetShips {
  planet_id: number;
  name: number;
  count: number;
}

export const PlanetShipsDefinition = {
  planet_id: RecsType.Number,
  name: RecsType.Number,
  count: RecsType.Number,
};

// Type definition for `nogame::models::game::GamePlanetCount` struct
export interface GamePlanetCount {
  game_id: number;
  count: number;
}

export const GamePlanetCountDefinition = {
  game_id: RecsType.Number,
  count: RecsType.Number,
};

export function defineContractComponents(world: World) {
  return {
    // Model definition for `nogame::models::colony::ColonyDockyardTimer` model
    ColonyDockyardTimer: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          colony_id: RecsType.Number,
          name: RecsType.Number,
          quantity: RecsType.Number,
          time_end: RecsType.Number,
        },
        {
          metadata: {
            name: 'ColonyDockyardTimer',
            types: ['u32', 'u8', 'u32', 'u64'],
            customTypes: ['ShipBuildType'],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::colony::ColonyDefenceTimer` model
    ColonyDefenceTimer: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          colony_id: RecsType.Number,
          name: RecsType.Number,
          quantity: RecsType.Number,
          time_end: RecsType.Number,
        },
        {
          metadata: {
            name: 'ColonyDefenceTimer',
            types: ['u32', 'u8', 'u32', 'u64'],
            customTypes: ['DefenceBuildType'],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::compound::PlanetCompounds` model
    PlanetCompounds: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          name: RecsType.Number,
          level: RecsType.Number,
        },
        {
          metadata: {
            name: 'PlanetCompounds',
            types: ['u32', 'u8', 'u8'],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::colony::ColonyPosition` model
    ColonyPosition: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          colony_id: RecsType.Number,
          position: PositionDefinition,
        },
        {
          metadata: {
            name: 'ColonyPosition',
            types: ['u32', 'u8'],
            customTypes: ['Position'],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::fleet::ActiveMission` model
    ActiveMission: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          mission_id: RecsType.Number,
          mission: MissionDefinition,
        },
        {
          metadata: {
            name: 'ActiveMission',
            types: ['u32', 'u32'],
            customTypes: ['Mission'],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::tech::PlanetTechTimer` model
    PlanetTechTimer: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          name: RecsType.Number,
          levels: RecsType.Number,
          time_end: RecsType.Number,
        },
        {
          metadata: {
            name: 'PlanetTechTimer',
            types: ['u32', 'u8', 'u64'],
            customTypes: ['TechUpgradeType'],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::colony::ColonyResource` model
    ColonyResource: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          colony_id: RecsType.Number,
          name: RecsType.Number,
          amount: RecsType.BigInt,
        },
        {
          metadata: {
            name: 'ColonyResource',
            types: ['u32', 'u8', 'u8', 'u128'],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::colony::ColonyDefences` model
    ColonyDefences: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          colony_id: RecsType.Number,
          name: RecsType.Number,
          count: RecsType.Number,
        },
        {
          metadata: {
            name: 'ColonyDefences',
            types: ['u32', 'u8', 'u8', 'u32'],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::planet::PlanetPosition` model
    PlanetPosition: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          position: PositionDefinition,
        },
        {
          metadata: {
            name: 'PlanetPosition',
            types: ['u32'],
            customTypes: ['Position'],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::game::GameOwnerPlanet` model
    GameOwnerPlanet: (() => {
      return defineComponent(
        world,
        {
          owner: RecsType.BigInt,
          planet_id: RecsType.Number,
        },
        {
          metadata: {
            name: 'GameOwnerPlanet',
            types: ['ContractAddress', 'u32'],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::colony::PlanetColoniesCount` model
    PlanetColoniesCount: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          count: RecsType.Number,
        },
        {
          metadata: {
            name: 'PlanetColoniesCount',
            types: ['u32', 'u8'],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::game::GamePlanetOwner` model
    GamePlanetOwner: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          owner: RecsType.BigInt,
        },
        {
          metadata: {
            name: 'GamePlanetOwner',
            types: ['u32', 'ContractAddress'],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::game::GamePlanet` model
    GamePlanet: (() => {
      return defineComponent(
        world,
        {
          owner: RecsType.BigInt,
          planet_id: RecsType.Number,
        },
        {
          metadata: {
            name: 'GamePlanet',
            types: ['ContractAddress', 'u32'],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::colony::ColonyCompounds` model
    ColonyCompounds: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          colony_id: RecsType.Number,
          name: RecsType.Number,
          level: RecsType.Number,
        },
        {
          metadata: {
            name: 'ColonyCompounds',
            types: ['u32', 'u8', 'u8', 'u8'],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::colony::ColonyCount` model
    ColonyCount: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          count: RecsType.Number,
        },
        {
          metadata: {
            name: 'ColonyCount',
            types: ['u8', 'u8'],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::colony::ColonyCompoundTimer` model
    ColonyCompoundTimer: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          colony_id: RecsType.Number,
          name: RecsType.Number,
          levels: RecsType.Number,
          time_end: RecsType.Number,
        },
        {
          metadata: {
            name: 'ColonyCompoundTimer',
            types: ['u32', 'u8', 'u8', 'u64'],
            customTypes: ['CompoundUpgradeType'],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::dockyard::PlanetDockyardTimer` model
    PlanetDockyardTimer: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          name: RecsType.Number,
          quantity: RecsType.Number,
          time_end: RecsType.Number,
        },
        {
          metadata: {
            name: 'PlanetDockyardTimer',
            types: ['u32', 'u32', 'u64'],
            customTypes: ['ShipBuildType'],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::colony::ColonyResourceTimer` model
    ColonyResourceTimer: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          colony_id: RecsType.Number,
          last_collection: RecsType.Number,
        },
        {
          metadata: {
            name: 'ColonyResourceTimer',
            types: ['u32', 'u8', 'u64'],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::fleet::IncomingMissionLen` model
    IncomingMissionLen: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          lenght: RecsType.Number,
        },
        {
          metadata: {
            name: 'IncomingMissionLen',
            types: ['u32', 'u32'],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::planet::PlanetDebrisField` model
    PlanetDebrisField: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          debris: DebrisDefinition,
        },
        {
          metadata: {
            name: 'PlanetDebrisField',
            types: ['u32'],
            customTypes: ['Debris'],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::game::GameSetup` model
    GameSetup: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          speed: RecsType.Number,
          start_time: RecsType.Number,
        },
        {
          metadata: {
            name: 'GameSetup',
            types: ['u8', 'u32', 'u64'],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::compound::PlanetCompoundTimer` model
    PlanetCompoundTimer: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          name: RecsType.Number,
          levels: RecsType.Number,
          time_end: RecsType.Number,
        },
        {
          metadata: {
            name: 'PlanetCompoundTimer',
            types: ['u32', 'u8', 'u64'],
            customTypes: ['CompoundUpgradeType'],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::fleet::ActiveMissionLen` model
    ActiveMissionLen: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          lenght: RecsType.Number,
        },
        {
          metadata: {
            name: 'ActiveMissionLen',
            types: ['u32', 'u32'],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::fleet::IncomingMissions` model
    IncomingMissions: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          mission_id: RecsType.Number,
          mission: IncomingMissionDefinition,
        },
        {
          metadata: {
            name: 'IncomingMissions',
            types: ['u32', 'u32'],
            customTypes: ['IncomingMission'],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::planet::PlanetResourcesSpent` model
    PlanetResourcesSpent: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          spent: RecsType.BigInt,
        },
        {
          metadata: {
            name: 'PlanetResourcesSpent',
            types: ['u32', 'u128'],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::defence::PlanetDefences` model
    PlanetDefences: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          name: RecsType.Number,
          count: RecsType.Number,
        },
        {
          metadata: {
            name: 'PlanetDefences',
            types: ['u32', 'u8', 'u32'],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::planet::PlanetResourceTimer` model
    PlanetResourceTimer: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          last_collection: RecsType.Number,
        },
        {
          metadata: {
            name: 'PlanetResourceTimer',
            types: ['u32', 'u64'],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::planet::PositionToPlanet` model
    PositionToPlanet: (() => {
      return defineComponent(
        world,
        {
          position: PositionDefinition,
          planet_id: RecsType.Number,
        },
        {
          metadata: {
            name: 'PositionToPlanet',
            types: ['u32'],
            customTypes: ['Position'],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::planet::PlanetResource` model
    PlanetResource: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          name: RecsType.Number,
          amount: RecsType.BigInt,
        },
        {
          metadata: {
            name: 'PlanetResource',
            types: ['u32', 'u8', 'u128'],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::planet::LastActive` model
    LastActive: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          time: RecsType.Number,
        },
        {
          metadata: {
            name: 'LastActive',
            types: ['u32', 'u64'],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::colony::ColonyShips` model
    ColonyShips: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          colony_id: RecsType.Number,
          name: RecsType.Number,
          count: RecsType.Number,
        },
        {
          metadata: {
            name: 'ColonyShips',
            types: ['u32', 'u8', 'u8', 'u32'],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::tech::PlanetTechs` model
    PlanetTechs: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          name: RecsType.Number,
          level: RecsType.Number,
        },
        {
          metadata: {
            name: 'PlanetTechs',
            types: ['u32', 'u8', 'u8'],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::colony::ColonyOwner` model
    ColonyOwner: (() => {
      return defineComponent(
        world,
        {
          colony_planet_id: RecsType.Number,
          planet_id: RecsType.Number,
        },
        {
          metadata: {
            name: 'ColonyOwner',
            types: ['u32', 'u32'],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::defence::PlanetDefenceTimer` model
    PlanetDefenceTimer: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          name: RecsType.Number,
          quantity: RecsType.Number,
          time_end: RecsType.Number,
        },
        {
          metadata: {
            name: 'PlanetDefenceTimer',
            types: ['u32', 'u32', 'u64'],
            customTypes: ['DefenceBuildType'],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::dockyard::PlanetShips` model
    PlanetShips: (() => {
      return defineComponent(
        world,
        {
          planet_id: RecsType.Number,
          name: RecsType.Number,
          count: RecsType.Number,
        },
        {
          metadata: {
            name: 'PlanetShips',
            types: ['u32', 'u8', 'u32'],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `nogame::models::game::GamePlanetCount` model
    GamePlanetCount: (() => {
      return defineComponent(
        world,
        {
          game_id: RecsType.Number,
          count: RecsType.Number,
        },
        {
          metadata: {
            name: 'GamePlanetCount',
            types: ['u8', 'u32'],
            customTypes: [],
          },
        }
      );
    })(),
  };
}
